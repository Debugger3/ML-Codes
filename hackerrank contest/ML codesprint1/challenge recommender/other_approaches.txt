**I ended up recommending challenges the user tried but had not solved, challenges in the user's subdomains and domains of interest. Was able to achieve 0.142, but couldn't go any further. It was implemented in Python btw.

**I'm getting 0.144 score. I'm searching for the K nearest competitors for the hacker and then recommend the most popular challenges among these competitors.I think hybid approaches are needed here. For example recommending X challenges from the challenges that a user tried but didn't solve + Y challenges from the most popular challenges among his similar competitors and so on.My hypothesis was to represent the hacker vector by the challenges that the user attempted . Then using cosine similarity you can compute the similarty score between any two hackers. so for example if hacker 1 participated in chall1,chall2,chall3 and hacker 2 participated in chall2,chall4,chall5 then they have a similarty of 0.33. 
